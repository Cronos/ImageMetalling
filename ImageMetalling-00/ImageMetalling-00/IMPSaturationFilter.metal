//
//  IMPFilter.metal
//  ImageMetalling-00
//
//  Created by denis svinarchuk on 27.10.15.
//  Copyright © 2015 ImageMetalling. All rights reserved.
//

//
// Поверьте - это надо:)
//
#include <metal_stdlib>
#include <simd/simd.h>
using namespace metal;

/**
 * Код главной функции фильтра. Важное достижение Metal Shading Languge (MSL) перед GLSL вот в этом всем.
 * Нам нет никакой надобности описывать вершинные и врагментные функция для обработки массивов данных.
 * Мы всегда работаем с произвольным набором вот этих данных, хотя чаще с изображениями. Но пофакту, изображения
 * - это теже массивы структурированной информации и Metal предоставляет некоторые встроенные классы и функции для работы с ними.
 * 
 * В любом случае,  90% кода фильтров на Metal будет использовать kernel - функции.
 */
kernel void kernel_adjustSaturation(
                                    //
                                    // текстура с исходной картинкой
                                    //
                                    texture2d<float, access::sample> inTexture [[texture(0)]],
                                    //
                                    // текстура в которую можно что-то записать
                                    //
                                    texture2d<float, access::write> outTexture [[texture(1)]],
                                    //
                                    // Какой-то параметр функции фильтра, который мы передали в качестве аргумента
                                    // через универсальный буфер обмена
                                    //
                                    constant float &saturation [[buffer(0)]],
                                    //
                                    // Идентификатор потока в сетке вычислений.
                                    // По сути - это двумерная координата пиксела, в уме держим, что пикселы
                                    // обрабатываются одновременно.
                                    //
                                    uint2 gid [[thread_position_in_grid]]
                                    )
{
    //
    // Текстра, в терминах MSL - объект.
    // У объектов этого класса есть метод read(позиция) - прочитать пиксел тектсуры в формате RGBA с точностью плавающей точки.
    //
    float4 inColor = inTexture.read(gid);
    
    //
    // наша главная функция Image Processing-а
    //
    
    // 1. вычисляем светлоту пиксела
    float  value = dot(inColor.rgb, float3(0.299, 0.587, 0.114));
    // 2. накладываем светлоту на исходный цвет - степень смешения задаем через значение насыщенности
    float4 outColor(mix(float4(float3(value), 1.0), inColor, saturation));
    
    //
    // записываем все в результирующую текстуру.
    //
    outTexture.write(outColor, gid);
}
